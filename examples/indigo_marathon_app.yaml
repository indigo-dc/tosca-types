tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/indigo-dc/tosca-types/stable/v4.0/custom_types.yaml

description: >
  TOSCA examples for specifying Marathon applications to enable the
  specification of long-running services in INDIGO.

topology_template:

  inputs:

    cpus:
      type: float
      description: Amount of CPUs for this service
      required: yes
      default: 1.0
    
    mem:
      type: scalar-unit.size
      description: Amount of Memory for this service
      required: yes 
      default: 1 GB
  
    docker_image:
      type: string
      description: Docker image to be used to run the container application
      required: yes
      default: ""

    port:
      type: integer
      description: service port (exposed by the docker container) 
      required: yes
      default: 8080

    data_path:
      type: string
      description: container path for persistent data
      required: no
      default: "/data"

  node_templates:

    marathon-app:
      type: tosca.nodes.indigo.Container.Application.Docker.Marathon
      properties:
        # environment_variables: 
        uris: []
        labels:
          HAPROXY_GROUP: external
      artifacts:
        image:
          file: { get_input: docker_image}
          type: tosca.artifacts.Deployment.Image.Container.Docker
      requirements:
        - host: docker_runtime

    docker_runtime:
      type: tosca.nodes.indigo.Container.Runtime.Docker
      capabilities:
        host:
          properties:
            num_cpus: { get_input: cpus}
            mem_size: { get_input: mem}
            publish_ports:
               - protocol: tcp
                 source: { get_input: port}
            volumes: [ { concat: [ 'marathon:', get_input: data_path, ':rw:dvdi:rexray'] } ]

  outputs:
    endpoint: 
      value:  { concat: [ { get_attribute : [ marathon-app, load_balancer_ips, 0 ] }, ':', { get_attribute : [ docker_runtime, host, publish_ports, 0, target ] } ] }
