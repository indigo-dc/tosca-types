tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/indigo-dc/tosca-types/spark_on_mesos/custom_types.yaml

description: >
    TOSCA template for deploying Spark + Mesos cluster. The following flavors can be selected setting the input spark_mesos_flavor:
    * apache-zeppelin  --> deploys an instance of Zeppelin through Marathon that can be used to play with Spark interactively  
    * spark-dispatcher --> deploys an instance of MesosClusterDispatcher through Marathon 

topology_template:

  inputs:

    marathon_password:
      type: string
      description: Admin password for accessing Marathon HTTP service
      default: 's3cret'
      required: yes

    slave_num:
      type: integer
      description: Number of slave nodes in the cluster
      default: 4
      required: yes

    slave_cpus:
      type: integer
      description: Numer of CPUs for the slave node
      default: 2
      required: yes

    slave_mem:
      type: scalar-unit.size
      description: Amount of Memory for the slave node
      default: 4 GB
      required: yes

    master_cpus:
      type: integer
      description: Numer of CPUs for the master node
      default: 2
      required: yes

    spark_mesos_flavor:
      type: string
      constraints:
      - valid_values: [ apache-zeppelin, spark-dispatcher ]
      required: false
      default: 'apache-zeppelin'

    master_mem:
      type: scalar-unit.size
      description: Amount of Memory for the master node
      default: 4 GB
      required: yes

    hdfs_uri:
      type: string
      description: HDFS URI needed to configure Spark storage
      required: no
      default: ''

    spark_cores_max: 
      type: integer
      description: The maximum amount of CPU cores to request for the application from across the cluster
      required: false
      default: ''

    spark_executor_cores: 
      type: integer
      description: The number of cores to use on each executor.
      required: false
      default: ''

    spark_executor_mem:
      type: scalar-unit.size
      description: Amount of memory to use per executor process 
      required: false
      default: ''

    spark_driver_mem: 
      type: scalar-unit.size
      description: Amount of memory to use for the driver process, i.e. where SparkContext is initialized
      required: false
      default: ''

    spark_driver_cores: 
      type: integer
      description: Number of cores to use for the driver process
      required: false
      default: ''

    spark_swift_auth_url:
      type: string
      description: 'Keystone auth URL. Ex: https://cloud.recas.ba.infn.it:5000/v2.0/tokens'
      required: false
      default: ''

    spark_swift_region:
      type: string
      description: Swift region name
      required: false
      default: ''

    spark_swift_tenant:
      type: string
      description: Swift tenant name
      required: false
      default: ''

    spark_swift_username:
      type: string
      description: Swift user name
      required: false
      default: ''

    spark_swift_password:
      type: string
      description: Swift user password
      required: false
      default: ''

    spark_swift_provider:
      type: string
      description: Swift provider name
      required: false
      default: ''

  node_templates:

    spark_application:
      type: tosca.nodes.indigo.SparkMesos
      properties:
        marathon_password: { get_input: marathon_password }
        zookeeper_peers: { get_attribute: [ mesos_master_server, public_address ] }
        spark_hdfs_uri: { get_input: hdfs_uri }
        spark_cores_max: { get_input: spark_cores_max }
        spark_executor_cores: { get_input: spark_executor_cores }
        spark_executor_mem:  { get_input: spark_executor_mem }
        spark_driver_mem: { get_input: spark_driver_mem }
        spark_driver_cores:  { get_input: spark_driver_cores }
        spark_swift_auth_url: { get_input: spark_swift_auth_url }
        spark_swift_region: { get_input: spark_swift_region }
        spark_swift_tenant: { get_input: spark_swift_tenant }
        spark_swift_username: { get_input: spark_swift_username }
        spark_swift_password: { get_input: spark_swift_password }
        spark_swift_provider: { get_input: spark_swift_provider }
      requirements:
        - host: mesos_master

    mesos_master:
      type: tosca.nodes.indigo.MesosMaster
      properties:
        marathon_password: { get_input: marathon_password }
        chronos_password: 's3cret'
      requirements:
        - host: mesos_master_server

    mesos_slave:
      type: tosca.nodes.indigo.MesosSlave
      properties:
        master_ips: { get_attribute: [ mesos_master_server, public_address ] }
        front_end_ip: { get_attribute: [ mesos_master_server, public_address, 0 ] }
      requirements:
        - host: mesos_slave_server
        
    mesos_load_balancer:
      type: tosca.nodes.indigo.MesosLoadBalancer
      properties:
        master_ips: { get_attribute: [ mesos_master_server, public_address ] }
        marathon_password: { get_input: marathon_password }
      requirements:
        - host: mesos_lb_server        

    mesos_master_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            dns_name: mesosserverpublic
            network_name: PUBLIC
            ports:
              mesos_port:
                protocol: tcp
                source: 5050
              marathon_port:
                protocol: tcp
                source: 8443
              chronos_port:
                protocol: tcp
                source: 4443
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: { get_input: master_cpus }
            mem_size: { get_input: master_mem }
        os:
          properties:
            image: linux-ubuntu-14.04-vmi

    mesos_slave_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count: { get_input: slave_num }
        endpoint:
          properties:
            dns_name: mesosslave
            network_name: PUBLIC
            ports:
              mesos_port:
                protocol: tcp
                source: 5051
              spark_port:
                protocol: tcp
                source: 4040
        host:
          properties:
            num_cpus: { get_input: slave_cpus }
            mem_size: { get_input: slave_mem }
        os:
          properties:
            image: linux-ubuntu-14.04-vmi
            
    mesos_lb_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            ports:
              all_tcp:
                protocol: tcp
                source_range: [ 1, 65535 ]
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: 2
            mem_size: 2 GB
        os:
          properties:
            image: linux-ubuntu-14.04-vmi

  outputs:
    spark_endpoint: 
      value: { concat: [ 'http://', get_attribute: [ mesos_lb_server, public_address, 0 ], ':8081' ] }
    marathon_endpoint: 
      value: { concat: [ 'https://', get_attribute: [ mesos_master_server, public_address, 0 ], ':8443' ] }
    mesos_master_ips:
      value: { get_attribute: [ mesos_master_server, public_address ] }
