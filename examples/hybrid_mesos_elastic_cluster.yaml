tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/indigo-dc/tosca-types/devel/custom_types.yaml
 
description: >
  TOSCA test for launching a Virtual Elastic Cluster. It will launch
  a single front-end that will be in change of managing the elasticity
  using the specified LRMS (torque, sge, slurm and condor) workload.

topology_template:
  inputs:
    mesos_password:
      type: string
      description: Admin password for accessing Mesos HTTP service
      required: yes
      default: mesos_pass

    marathon_password:
      type: string
      description: Admin password for accessing Marathon HTTP service
      required: yes
      default: marathhon_pass

    chronos_password:
      type: string
      description: Admin password for accessing Chronos HTTP service
      required: yes
      default: chronos_pass

    slave_num:
      type: integer
      description: Number of slave nodes in the cluster
      default: 3
      required: yes

    slave_cpus:
      type: integer
      description: Numer of CPUs for the slave node
      default: 2
      required: yes

    slave_mem:
      type: scalar-unit.size
      description: Amount of Memory for the slave node
      default: 3 GB
      required: yes

    master_cpus:
      type: integer
      description: Numer of CPUs for the master node
      default: 2
      required: yes

    master_mem:
      type: scalar-unit.size
      description: Amount of Memory for the master node
      default: 4 GB
      required: yes

    hybrid:
      type: boolean
      description: Flag to specify that this cluster will work in an hybrid environment
      default: true
      required: false

  node_templates:

    elastic_cluster_front_end:
      type: tosca.nodes.indigo.ElasticCluster
      properties:
        deployment_id: orchestrator_deployment_id
        iam_access_token: iam_access_token
        iam_clues_client_id: iam_clues_client_id
        iam_clues_client_secret: iam_clues_client_secret
        marathon_credentials:
          protocol: https
          token:  { get_input: marathon_password }
          user: admin
          token_type: password
        chronos_credentials:
          protocol: https
          token:  { get_input: chronos_password }
          user: admin
          token_type: password
        mesos_credentials:
          protocol: http
          token:  { get_input: mesos_password }
          user: admin
          token_type: password
        hybrid: { get_input: hybrid }
      requirements:
        - lrms: mesos_master
        - wn: mesos_slave

    mesos_master:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Mesos
      properties:
        mesos_masters_list: { get_attribute: [ HOST, private_address ] }
        mesos_password: { get_input: mesos_password }
        marathon_password: { get_input: marathon_password }
        chronos_password: { get_input: chronos_password }
        hybrid: { get_input: hybrid }
      requirements:
        - host: mesos_master_server

    mesos_slave:
      type: tosca.nodes.indigo.LRMS.WorkerNode.Mesos
      capabilities:
        wn:
          properties:
            max_instances: { get_input: slave_num }
            min_instances: 0
      properties:
        public_front_end_ip: { get_attribute: [ mesos_master_server, public_address, 0 ] }
        front_end_ip: { get_attribute: [ mesos_master_server, private_address, 0 ] }
        master_ips: { get_attribute: [ mesos_master_server, private_address ] }
        hybrid: { get_input: hybrid }
      requirements:
        - host: mesos_slave_server

    mesos_load_balancer:
      type: tosca.nodes.indigo.MesosLoadBalancer
      properties:
        master_ips: { get_attribute: [ mesos_master_server, private_address ] }
        marathon_password: { get_input: marathon_password }
        hybrid: { get_input: hybrid }
      requirements:
        - host: mesos_lb_server

    mesos_master_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            dns_name: mesosserverpublic
            network_name: PUBLIC
            ports:
              mesos_port:
                protocol: tcp
                source: 5050
              marathon_port:
                protocol: tcp
                source: 8443
              chronos_port:
                protocol: tcp
                source: 4443
              openvpn:
                protocol: udp
                source: 1194
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: 2
            mem_size: 2 GB
        os:
          properties:
            type: linux
            distribution: ubuntu
            version: 16.04

    mesos_slave_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count: 0
        host:
          properties:
            num_cpus: { get_input: slave_cpus }
            mem_size: { get_input: slave_mem }
        os:
          properties:
            type: linux
            distribution: ubuntu
            version: 16.04

    mesos_lb_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            ports:
              all_tcp:
                protocol: tcp
                source_range: [ 1, 65535 ]
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: 2
            mem_size: 2 GB
        os:
          properties:
            type: linux
            distribution: ubuntu
            version: 16.04

  outputs:
    mesos_lb_ips:
      value: { get_attribute: [ mesos_lb_server, public_address ] }
    mesos_master_ips:
      value: { get_attribute: [ mesos_master_server, public_address ] }
    mesos_endpoint:
      value: { concat: [ 'http://', get_attribute: [ mesos_master_server, public_address, 0 ], ':5050' ] }
    marathon_endpoint:
      value: { concat: [ 'https://', get_attribute: [ mesos_master_server, public_address, 0 ], ':8443' ] }
    chronos_endpoint:
      value: { concat: [ 'https://', get_attribute: [ mesos_master_server, public_address, 0 ], ':4443' ] }

  policies:
    - deploy_on_ifca:
        type: tosca.policies.indigo.SlaPlacement
        properties: { sla_id: 5cf12da6cb0e8f527dfb3c97 }
        targets: [ mesos_slave_server ]

#    - deploy_on_recas:
#        type: tosca.policies.indigo.SlaPlacement
#        properties: { sla_id: 5bfbc091a9a88f528bf5114b }
#        targets: [ mesos_slave_server ]
