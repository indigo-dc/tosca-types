tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/indigo-dc/tosca-types/stable/v4.0/custom_types.yaml
 
description: >
  TOSCA test for launching a Virtual Elastic Cluster. It will launch
  a single front-end that will be in change of managing the elasticity
  using the specified LRMS (torque, sge, slurm and condor) workload.
topology_template:
  inputs:
    wn_num:
      type: integer
      description: Maximum number of WNs in the elastic cluster
      default: 5
      required: yes

    fe_cpus:
      type: integer
      description: Numer of CPUs for the front-end node
      default: 1
      required: yes

    fe_mem:
      type: scalar-unit.size
      description: Amount of Memory for the front-end node
      default: 1 GB
      required: yes

    wn_cpus:
      type: integer
      description: Numer of CPUs for the WNs
      default: 1
      required: yes

    wn_mem:
      type: scalar-unit.size
      description: Amount of Memory for the WNs
      default: 1 GB
      required: yes

    location: 
      type: string
      description: mounting point for the container
      default: /tmp/onedata/

    oneprovider_host: 
      type: string
      description: IP of the oneprovider
      default: "oneprovider.cloud.cnaf.infn.it"
      
    onezone_host: 
      type: string
      description: IP of the onezone
      default: "https://onezone.cloud.cnaf.infn.it"

    onedata_dataspace: 
      type: string
      description: Name of the onedata dataspace
      default: "galeno"
    
    token:
      type: string
      description: access token
      default: ""

  node_templates:

    elastic_cluster_front_end:
      type: tosca.nodes.indigo.ElasticCluster
      properties:
        deployment_id: orchestrator_deployment_id
        iam_access_token: iam_access_token
      requirements:
        - lrms: slurm_front_end
        - wn: wn_node

    slurm_front_end:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Slurm
      properties:
        wn_ips: { get_attribute: [ slurm_wn, private_address ] }
      requirements:
        - host: slurm_server

    slurm_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            dns_name: slurmserver
            network_name: PUBLIC
            ports:
              oneclient_5555:
                protocol: tcp
                source: 5555
              oneclient_443:
                protocol: tcp
                source: 443
              apiRest:
                protocol: tcp
                source: 8080
        host:
          properties:
            num_cpus: { get_input: fe_cpus }
            mem_size: { get_input: fe_mem }
        os:
          properties:
            image: onecloud-linux-ubuntu-16.04.vmi
       
      requirements:
        - local_storage:
            node: my_onedata_storage
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: { get_input: location } 
              interfaces:
                Configure:
                  pre_configure_source:
                    implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/stable/v4.0/artifacts/onedata/oneclient_install.yml
                    inputs:
                      onedata_location: { get_property: [ SELF, location ] }
                      onedata_token: { get_property: [ TARGET, credential, token ] }
                      oneprovider_host: { get_property: [ TARGET, oneprovider_host ] }
                      dataspace: { get_property: [ TARGET, dataspace ] }
                      onezone_endpoint: { get_property: [ TARGET, onezone_endpoint ] }
    wn_node:
      type: tosca.nodes.indigo.LRMS.WorkerNode.Slurm
      properties:
        front_end_ip: { get_attribute: [ slurm_server, private_address, 0 ] }
      capabilities:
        wn:
          properties:
            max_instances: { get_input: wn_num }       
      requirements:
        - host: slurm_wn
            
    slurm_wn:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PRIVATE
            ports:
              oneclient_5555:
                protocol: tcp
                source: 5555
              oneclient_443:
                protocol: tcp
                source: 443
              ssh_port:
                protocol: tcp
                source: 22
        scalable:
          properties:
            count: 2
        host:
          properties:
            num_cpus: { get_input: wn_cpus }
            mem_size: { get_input: wn_mem }
        os:
          properties:
            image: onecloud-linux-ubuntu-16.04.vmi

      artifacts:
        docker_agent_role:
          file: indigo-dc.docker
          type: tosca.artifacts.AnsibleGalaxy.role
        
      interfaces:
        Standard:
          configure:
           implementation: https://osiristorage.blob.core.windows.net/data/dockerplaybook.yml

      requirements:
        - local_storage:
            node: my_onedata_storage
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: { get_input: location } 
              interfaces:
                Configure:
                  pre_configure_source:
                    implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/stable/v4.0/artifacts/onedata/oneclient_install.yml
                    inputs:
                      onedata_location: { get_property: [ SELF, location ] }
                      onedata_token: { get_property: [ TARGET, credential, token ] }
                      oneprovider_host: { get_property: [ TARGET, oneprovider_host ] }
                      dataspace: { get_property: [ TARGET, dataspace ] }
                      onezone_endpoint: { get_property: [ TARGET, onezone_endpoint ] }

    my_onedata_storage: 
      type: tosca.nodes.indigo.OneDataStorage
      properties:
        oneprovider_host: ["oneprovider.cloud.cnaf.infn.it"]
        dataspace: ["galeno"]
        onezone_endpoint: https://onezone.cloud.cnaf.infn.it
        credential:
          token: { get_input: token }
          token_type: token

  outputs:
    cluster_ip:
      value: { get_attribute: [ slurm_server, public_address, 0 ] }
    cluster_creds:
      value: { get_attribute: [ slurm_server, endpoint, credential, 0 ] }
